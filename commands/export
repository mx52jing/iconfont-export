#! /usr/bin/env node
const path = require('path');
const fs = require('fs');
const fse = require('fs-extra')
const colors = require('colors')
const camelCase = require('lodash').camelCase
const upperFirst = require('lodash').upperFirst
const shell = require('shelljs')

shell
    .echo(colors.green('start build icon and generate iconfont directory'))
    .exec('npx iconfont-h5')

// 获取配置信息
const getConfig = () => {
    const targetFilePath = path.resolve('iconfont.json'),
        config = require(targetFilePath),
        { save_dir, trim_icon_prefix } = config,
        fontDirPath = path.resolve(save_dir.slice(0, save_dir.lastIndexOf('/') + 1))
    return {
        fontDirPath,
        prefix: trim_icon_prefix
    }
}
// 获取所有组件名称
const getNameMap = str => {
    const reg = /case\s+['"]([0-9a-zA-Z-_]+)['"]:/g,
        names = new Map()
    str.replace(reg, (match, key) => {
        const lowercase = camelCase(key),
            uppercase = upperFirst(lowercase),
            fileNameReg = new RegExp(`import\\s+(Icon(?:${lowercase}|${uppercase}))\\s+from`)
        if(fileNameReg.test(str)) {
            names.set(key, RegExp.$1)
        }
    })
    return names
}

// 生成空格
const whitespace = repeat => {
    return ' '.repeat(repeat)
}
// 最终生成文件的模版
let template = `import React from 'react';
#imports#

export const IconFontMaps = new Map([
    #iconMaps#
])

const IconFont = ({ name, ...rest }) => {
    const Icon = IconFontMaps.get(name)
    if(!Icon) return null;
    return (
        <Icon {...rest}/>
    )
}

export {
    #allIconComp#
}
export default IconFont
`
// 获取组件所有内容
const generateFileContent = () => {
    const { fontDirPath } = getConfig(),
        files = fs.readdirSync(fontDirPath),
        filterDirectories = files.filter(file => {
            const stat = fs.statSync(path.join(fontDirPath, file))
            return stat.isDirectory()
        }),
        allDirectoryLen = filterDirectories.length
    filterDirectories.forEach((item, index) => {
        const file = fs.readFileSync(path.join(fontDirPath, item, 'index.js'), { encoding: 'utf8' }),
            nameMaps = getNameMap(file)
        spliceContent(nameMaps, item, index, allDirectoryLen)
    })
}

// 拼接文件内容
const spliceContent = (nameMaps, pathName, index, allLen) => {
    const isLast = index === allLen - 1
    let imports = '',
        // cases = '',
        iconMaps = '',
        allIconComp = ''
    for (const [name, filename] of nameMaps) {
        imports += `import ${filename} from './${pathName}/${filename}'\n`
        // cases += `${whitespace(8)}case '${name}':\n${whitespace(12)}return <${filename} {...rest} />;\n`
        iconMaps += `${whitespace(4)}["${name}", ${filename}],\n`
        allIconComp += `${whitespace(4)}${filename},\n`
    }
    for (const replaceKey of ['imports', 'iconMaps', 'allIconComp']) {
        const replaceContent = eval(replaceKey)
        template = template.replace(
            new RegExp(`#${replaceKey}#`),
            isLast ? replaceContent : `${replaceContent}#${replaceKey}#`
        )
    }
}

!(async () => {
    try {
        await generateFileContent()
        const { fontDirPath } = getConfig(),
            writePath = path.join(fontDirPath, 'index.js')
        fse.outputFileSync(writePath, template)
        console.log(`${colors.green(`√`)} Generate export icon component file ${colors.green(`${writePath}`)}`)
    } catch (err) {
        console.log(colors.red(err))
    }
})()
